(define (square x)
    (* x x))

;441
(square 21) 

;49
(square (+ 2 5))

; 81
(square (square 3))

; составные процедура
(define (sum-of-squares x y)
    (+ (square x) 
       (square y)))

; 5
(sum-of-squares 2 1)

(define (f a)
    (sum-of-squares (+ a 1) (* a 2)))

; 136
(f 5)


; Порядок вычисления
; Нормальный порядок вычисления - полная подстановка, затем редукция. Минус в том, что в результате полной подстановки могут появиться одинаковые операции, которые интерпретатор будет выполнять многократно.
; Аппликативный порядок вычисления - вычисление аргументов, затем применение процедуры. Дает прирост производительности за счет оптимизации вычислений (не нужно вычислять многократно повторяющиеся операции).
; В большинстве случаев оба порядка вычисления дают одинаковый результат, но есть исключения
; Lisp использует аппликативный порядок вычисления